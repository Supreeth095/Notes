* Part 1: The Basics
- Why Templates? C++ requires us to declare variables, functions and most other kinds of entities using specific styles. However, a lot of codes look the same for different type. If your program language doesn't support a special language feature for this, you need to:
  + implement the same behavior for different types
  + write the general code for the a common base type
  + use special preprocessors
- Template is a solution for this problem. Templates allow us to parameterize behavior, to optimize code, and to parameterize information.

** Function Templates 
- Function Templates are functions that are parameterized so that they represent a family of functions
*** A First look at Function Templates
- Function templates provide a functional behavior that can be called for different types. In other words, a function template represents a family of functions.
- templates aren't compiled into single entities that can handle any type. Instead, different entities are generated from the template for every type for which the template is used
- the process of replacing template parameters by concrete types is called /instantiation/
- An attempt to instantiate a template for a type that doesn't support all the operations used w/i it will result in a compile-time error. Thus templates are compiled twice:
  + Without instantiation, the template code itself is checked for correct syntax.
  + At the time of instantiation, the template code is checked to ensure that all calls are valid. 
- This leads to an important problem in the handling of templates in practice: when a function template is used in a way that triggers its instantiation, a compiler will need to see that template's definition. This breaks the usual compile and link distinction for ordinary functions, when the declaration of a function is sufficient to compile its use.

*** Argument Deduction
- the template parameters are determined by the arguments we pass. No automatic type conversion is allowed here. Each T must match exactly. 
template<typename T>
inline const& T max(const T& a, const T& b);

max(4, 7) // OK
max(4, 4.2) // Error: First T is int, second T is double.
- There are 3 ways to handle such errors:
  + Cast the arguments that they both match
	max(static_cast<double>(4), 4.2)
  + Specify explicitly the type of T
	max<double>(4, 4.2)
  + Specify that the parameters may have different types.

*** Template parameters
- Function templates have 2 kinds of parameters
  + template parameters.
  + call parameters

Example:
template<typename T1, typename T2>
inline T1 max(const T1& a, const T2& b) {
    return a > b ? a : b;
}
- the above example has drawbacks
  + the return type must be declared
  + converting the type of the second parameter into return type creates a new, local temporary object. As a consequence, you cannot return the result by reference.

*** Overloading Function Templates
- like ordinary function, function templates can be overloaded.
- You should always have all overloaded versions of a function declared before the function is called.

*** Summary
- Template functions define a family of functions for different template arguments
- When you pass template arguments, function templates are instantiated for these argument types.
- You can explicitly qualify the template parameters
- You can overload function templates 
- When you overload function templates, limit your changes to specifying template parameters explicitly
- Make sure you see all overloaded versions of function templates before you call them.

** Class Templates
*** Declaration of Class Templates
template<typename T>
class Stack {
};

- Declare copy constructors, assignment operator
template <typename T>
class Stack {
   Stack(const Stack<T>&);
   Stack<T>& operator=(const Stack<T>&);
};

*** Implementation of Member Functions
- To define a member function of a class template, you have to specify that it is a function template, and you have to use the full type qualification of the class template.

*** Specializations of Class Templates
- You can specialize a class template for certain template arguments. Similar to the overloading of function templates, specializing class templates allows you to optimize implementations for certain types or to fix a misbehavior of certain types for an instantiation of the class template.
- To specialize a class template, you have to declare the class with a leading template<>

*** Partial Specialization
- Class templates can be partially specialized. You can specify special implementations for particular circumstances, but some template parameters must still be defined by the user.
- Example for the following class template
template <typename T1, typename T2>
class MyClass {
};

- the following partial specializations are possible
template <typename T>
class MyClass<T, T> {
};

template <typename T>
class MyClass<T, int> {
};

template <typename T1, typename T2>
class MyClass<T1*, T2*> {
*;

*** Default Template Arguments
- For class templates you can also define default values for template parameters. These values are called /default template arguments/
*** Summary
- A class template is a class that is implemented with one or more type parameters left open.
- To use a class template, you pass the open types as template arguments. The class template is instantiated (and compiled) for these types.
- For class templates, only those member functions that are called are instantiated.
- you can specialize class templates for certain types.
- You can partially specialize class templates for certain types
- you can define default values for class template parameters. These may refer to previous template parameters.

** Nontype Template Parameters
- For function and class templates, template parameters don't have to be types. They can also be ordinary values. As with templates using type parameters, you define code for which a certain detail remains open until the code is used. However, the detail that is open is a value instead of a type. When using such a template, you have to specify this value explicitly.

*** Nontype Class Template Parameters
*** Nontype Function Template Parameters
- according to the current standard, sets of overloaded functions cannot be used for template parameter deduction. Thus, you have to cast to the exact type of the function template argument.

*** Restrictions for Nontype Template Parameters
- Nontype template parameters carry some restrictions. In general, they may be constant integral values (including enumerations) or pointers to objects with external linkage.
- floating point numbers and class type objects are disallowed as nontype template parameters.
*** Summary
- Templates can have template parameters that are values rather than types
- you cannot use floating-point numbers, class-type objects, and objects with internal linkage (such as string literals) as arguments for nontype template parameters

** Tricky Basics
- pratical use of templates
  + additional use of the /typename/ keyword.
  + defining member functions and nested classes as templates
  + template template parameters
  + zero initialization
  + some details about using string literals as arguments for function templates

*** Keyword typename
- The keyword typename was introduced to clarify that an identifier inside a template is a type

  template<typename T>
  class MyClass {
     typename T::SubType *ptr;
  };

- typename here is used to clarify SubType is a type defined within class T. Thus, ptr is a pointer to the type T::SubType. Without typename, Subtype would be considered a static member. Thus it would be a concrete variable or object.
  -> T::SubType * ptr would be a multiplication of the static SubType member of class T with ptr

*** The .template construct

