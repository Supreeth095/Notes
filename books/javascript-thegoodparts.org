* Chapter 1: Good parts
- Shakepeare@The Merry Wives of Windsor: "setting attractions of my good parts aside I have no charms

- Javascript has some extraordinarily good parts: beatiful, elegant, highly expressive 
  language that is buried under a steaming pile of good intentions and blunders

** Why Javascript?
- Javascript is awesome but is blamed awful because of DOM
- DOM is poorly specified and inconsitently implemented

** Analyzing Javascript
- Javascript is built on some very good ideas:
  + functions: first class objects w/ lexical scoping
  + loose typing
  + dynamic objects
  + expressive object literal notation -> JSON
  + prototypal inheritance

* Chapter 2: Grammar
- Shakespeare@The tragedy of Titus Andronicus: "I know it well, I read it in the grammar 
  long ago"

** Whitespace
- take the form of formatting characters or comments
- Avoid block comments because

  /*
     var rm_a = /a*/.match(s);
  */

** Names
- It is not permitted to name avariable or parameter w/ a resevsed word. It is not permitted to use a reserved word as the name of an object property in an object literal or following a dot

** Numbers
- Javascript has a single number type. It is represented 64-bit floating point
- a large class of numeric type errors is avoided
- the value NaN is a number value that is the result of an operation that cannot produce a
  normal result. You can detect NaN with the isNaN(number) function
- The value Infinity represents all values greater than 1.79769313486231570e+308

** Strings
- all characters in Javascript are 16 bits wide
- Javascript does not have a character type. To represent a character, make a string with 
  just one character in it.
- Strings have methods

** Statements
- blocks in js do not create a new scope, so variables should be defined in the top of the
  function, not in blocks
- falsy values:
  + false
  + null
  + undefined
  + the empty string ''
  + the number 0
  + the number NaN
- It is usually necessary to test object.hasOwnProperty(variable) to determine whether the 
  property name is truly a member of the object or was found instead on the prototype chain

  for (myvar in obj) {
     if (obj.hasOwnProperty(myvar)) {
        ...
     }
  }

** Expressions
- The simplest expressions:
  + literal value
  + a variable
  + a built-in value
  + an invocation expression preceded by new
  + a refinement expression preceded by delete
  + an expression

** Literals

** Functions

* Chapter 3: Objects
- Shakespeare@The two gentlemen of Verona: "Upon a homely object Love can wink"
- The simple types of Javascript are numbers, strings, booleans, null and undefined
- All other values are objects:
  + have methods
  + immutable
- An object is a container of properties, where a property has a name and a value
- Javascript includes a prototype linkage feature that allows one object to inherit the properties of another. When used well, this can reduce object initialization time and memory consumption

** Object Literals
- Object literals provide a very convenient notation for creating a new object values . An object literal is a pair of curly braces surrounding zero or more name/value pairs

  var empty_object = {};
  var stooge = {
     "first-name": "Jerome",
     "last-name": "Howard"
  };

** Retrieval
- Values can be retrieved from an object by wrapping a string expression in a [] suffix
- Attempting to retrieve values from undefied will throw a TypeError exception.

** Update
- A value in an object can be updated by assignment. If the object does not alread have that property name, the object is augmented

** Reference
- Objects are passed around by reference. They are never copied

** Prototype
- Every object is linked to a prototype object from which it can inherited properties
- The prototype link is used only in retrieval. If we try to retrieve a property from an obj, and if the obj lacks the property name, then Javascript attempts to retrieve the property value from the prototype object

** Reflection
- It is easy to inspect an objec to determine what properties it has by attempting to retrieve the properties and examining the values obtained
- Some care must be taken because any property on the prototype chain can produce a value
  typeof flight.toString // 'function'
  typeof flight.constructor // 'function'

- 2 approaches to dealing w/ these undesired properties:
  + have your program look for and reject function values
  + use the /hasOwnProperty/ method


** Enumeration

** Delete
- The delete operator can be used to remove a property from an object. It will remove a property from the object if it has one. It will not touch any of the objects in the prototype linkage

** Global Abatement
- One way to minimize the use of global variables is to create a single object global variable for your application

  var MYAPP = {};
  
  MYAPP.stooge = {
     "first-name": "Joe",
     "last-name": "Howard"
  };

  MYAPP.flight = {
     airline: "Oceanic",
     number: 815,
     departure: {
        IATA: "SYD",
        time: "2004-09-22 14:55",
        city: "Sydney"
     },
     arrival: {
        IATA: "LAX",
        time: "2004-09023 10:42",
        city: "Los Angeles"
     }
  };

* Chapter 4: Functions
- Shakepeare@Measure for Measure: "Why, every fault's condemn'd ere it be done: Mine were the very cipher of a function..."
- Functions are a fundamental modular unit of Javascript:
  + Used for code reuse
  + information hiding
  + composition

- "the craft of programming is the factoring of a set of requirements in a set of functions and data structures"

** Function Objects
- Functions in JS are objects
  + collections of name/value pairs
  + having a hidden link to a prototype object (Function.prototype -> Object.prototype)
- Functions are objects means:
  + can be stored in variables, objects, and arrays
  + passed as arguments to functions
  + returned from functions
  + can have methods
- functions can be invoked

** Function Literal

   var add = function(a, b) {
      return a + b;
   };
- 4 parts of function literal:
  + reserved word function 
  + functon's name: if a function is not given a name, it is said to be /anonymous/
  + a set of parameters
  + a set of statemetns wrapped in curly braces

** Invocation
- Invoking a function suspends the execution  of the current function, passing controls and parameters to the new function. Every function receives 2 additional parameters: this and arguments

- The /this/ parameter is very important in oop, and its value is determined by the /invocation patter/. There are 4 patterns of invocation in JS

** The Method of Invocation Pattern
- When a function is stored as a property of an object, we call it a /method/
- When a method is invoked, this is bound to that object
- Methods that get their object context from /this/ are called /public methods/

** The Function Invocation Pattern
- When a function is not the property of an object, then it is invoked as a function:
    var sum = add(3,4);

- When a method is invoked w/ this pattern, /this/ is bound to the global object. This is a design mistake. Workaround:
  
  myObject.double = function() {
     var that = this;
     
     var helper = function() {
        that.value = add(that.value, that.value);
     };

     helper();
  };

** The Constructor Invocation Pattern
- If a function is invoked with the new prefix, then a new object will be created with a 
  hidden link to the value of the function's prototype member, and /this/ will be bound to 
  that new object

  var Quo = function(string) {
     this.status = string;
  }

  Quo.prototype.get_status = function() {
     return this.status;
  };

  var myQuo = new Quo("confused");
  print(myQuo.get_status());   // confused

** The Apply Invocation Pattern
- The *apply* method let us construct an array of arguments to use to invoke a function. It also lets us choose the value of this

  var array = [3, 4];
  var sum = add.apply(null, array);
  
  var statusObject = {
     status: 'A-OK'
  };

  var status = Quo.prototype.get_status.apply(statusObj);

** Arguments
- arguments is not really an array. It is an array-like object.
- arguments has a length property, but it lacks all of the array methods

** Return
- A function always returns a value. If the return value is not specified, then undefined is returned
- If the function was invoked with the new prefix and the return value is not an object then this (the new object) is returned instead

** Exceptions
- A try statement has a single catch block that will catch all exceptions. If your handling depends on the type of the exception, then the exception handler will have to inspect the name to determine the type of the exception

** Augmenting Types
- JS allows the basic types of the language to be /augmented/
- For example, by augmenting Function.prototype we can make a method available to all functions

  Function.prototype.method = function(name, func) {
     this.prototype[name] = func;
     return this;
  };

** Recursion
** Scope
- JS does have function scope. That means that the parameters and variables defined in a function are not visible outside of the function, and that a variable defined anywhere w/i a function is visible everywhere w/i the function

** Closure

   var myObject = function() {
      var myvalue = 0;
      return {
         increment: function(inc) {
            value += typeof inc === 'number' ? inc : 1;
         },
         getValue: function() {
            return value;
         }
      };
   }();
- We are assigning the result of invoking that function to myObject

** Callbacks
- Functions can make it easier to deal with discontinuous events

** Module
- We can use functions and closure to make modules

** Cascade
- Some methods do not have a return value. For example, it is typical for methods that set or change the state of an object to return nothing . If we have those methods return /this/ instead of /undefined/, we can enable /cascade/
- Cascading can produce interfaces that are very expressive. It controls the tendency to make interfaces that try to do too much at once.

** Curry
- Currying allows us to produce a new function by combining a function and an argument:
  
  var add1 = add.curry(1);
  print(add1(6));


** Memoization
- generalize a memoized function:
  
  var memoizer = function(memo, fundamental) {
     var shell = function(n) {
        var result = memo[n];
        if (typeof result !== 'number') {
           result = fundamental(shell, n);
           memo[n] = result;
        }
        return result;
     };
     return shell;
  };

  var fibonacci = memoizer([0, 1], function(shell, n) {
     return shell(n-1) + shell(n-2);
  });

* Chapter 5: Inheritance
- Shakepeare@The tragedy of King Richard: 
  "Divides one thing entire to many objects; 
  Like perspectives, which rightly gazed upon
  Show nothing but confusion...

- Javascript provides a much richer set of code reuse patterns

** Pseudoclassical
- When a function object is create, the Function constructor that produces the function object runs some code like this:
  this.prototype = {constructor: this};

- The constructor property is not useful. It is the prototype object that is important
- Examples

  Function.method('inherits', function(Parent) {
     this.prototype = new Parent();
     return this;
  });

  var Mammal = function(name) {
     this.name = name;
  };

  Mammal.prototype.get_name = function() {
     return this.name;
  };

  Mammal.prototype.says = function() {
     return this.saying || '';
  };

  var Cat = function(name) {
     this.name = name;
     this.saying = 'meow';
  }.inherits(Mammal).method(''..)


** Object Specifiers
- It can be much friendlier if we write the constructor to accept a single object specifier instead. That object contains the specification of the object to be constructed
  
  var myObj = maker(f, l, m, c, s);
  
  -> var myObj = maker({first: f, last: l, state: s, city :c});

** Prototypal

var myCat = Object.create(myMammal);
myCat.name = 'Henrietta';
myCat.saying = 'meow';
myca.purr = function(n) {
   ....
};
  
- This is /differential inheritance/

** Functional
- One weakness of the inheritance patterns we have seen so far is that we get no privacy. All properties are visible
- Fortunately, we have a much better alternative in an application of the module pattern. We start by making a function that will produce objects. The function contains four steps:
  + It creates a new object
    ~ object literal
    ~ call a constructor function with new prefix
    ~ use the Object.create method
  + It optionally defines private instance variables and methods
  + It augments that new object with methods
  + It returns that new object

var constructor = function(spec, my) {
   var that, other private instanse variables;
   my = my || {};

   Add shared variables and functions to my
   
   that = a new object;
   
   Add priviledged methods to that
   
   return that;
};

- The functional pattenr has a great deal of flexibility. It requires less effort that the pseudoclassical pattern, and gives us beter encapsulation and information hiding and access to super methods
- If all the state of an object is private, then the object is tamper-proof. Properties of the object can be replaced or deleted, but the integrity of the object is not compromised
- If we create an object in the functional style, and if all the methods of the object make no use of this or that, then the object is /durable/. A durable object is simply a collection of functions that act as /capabilities/

** Parts
- We can compose objects out of sets of parts

  var eventuality = function(that) {
     var registry = {};
     that.fire = function(event) {
        var array, func, handler, i, 
        type = typeof event === 'string' ? event : event.type;
        // If an array of handlers exist for this event, then
        // loop through it and execute the handlers in order
        if (registry.hasOwnProperty(type)) {
           array = registry[type];
           for (i=0; i<array.length;i+=1) {
              handler = array[i];
              func = handler.method;
              if (typeof func === 'string') {
                 func = this[func];
              }

              // Invoke a handler. If the record contained
              // parametes, then pass them. Otherwise, pass the event obj
              func.apply(this, handler.parameters || [event]);
           }
        }
        return this;
     };

     that.on = function(type, method, parameters) {
        var handler = {
           method: method,
           parameters: parameters
        };
        if (registry.hasOwnProperty(type)) {
           registry[type].push(handler);
        } else {
           registry[type] = [handler];
        }
        return this;
     };
     return that;
  };


* Chapter 6: Arrays
- Shakespeare@The First Part of Henry the Sixth:
  "Thee I'll chase hance, thou wolf in sheep's array

** Aray Literals
var number = ['zero', 'one', 'two', 'three', 'four', 
              'five', 'six', 'sevel', 'eight', 'nine'];
- number inherits from Array.prototype
- JS allows an array contain any mixture of values

** Length
- the length property is the largest integer property name in the array plus one.
- The length can be set explicitly. Making the length smaller will cause all properties with subscript that is greater than or equal to the new length to be deleted.

** Delete
- delete leaves a hole in the array
- use slice instead

** Enumeration

** Confusion
- Check for array
  
  var is_array = function(value) {
     return value &&
            typeof value === 'object' &&
            typeof value.length === 'number' &&
            typeof value.splice === 'function' &&
            !(value.propertyIsEnumerable('length'));
  };

** Methods
   
** Dimensions
- Array dimension: provide initialization
   Array.dim = function(dimension, initial) {
      var a = [], i;
      for(i=0;i<dimension;i+=1) {
         a[i] = initial;
      }
      return a;
   };

   var myArray = Array.dim(10, 0);
- the same as Array.matrix

* Chapter 7: Regular Expression
- Shakepeare@The First Part of Henry the Sixth
  "Whereas the contrary bringeth bliss,
  And is a pattern of celestial peace
  Whom should we watch with Henry, being a king"

- Regular expressions came from the mathematical study of formal languages

** An Example
parse url
/^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/

parse number
/^-?\d+(?:\.\d*)?(?:e[+\-]?\d+)?$/i

** Construction
- 2 ways to make a RegExp object
  + regular expression literal
  + Use RegExp constructor

** Elements
*** Regexp Choice
- A /regexp/ choice contains one or more /regexp sequences/

*** Regexp Sequence
- A /regexp sequence/ contains one or more /regexp factors/

*** Regexp Escape

** Regexp Group
- Capturing
  a capturing group is a regexp choice wrapped in parenthese
- Noncapturing
  A noncapturing group has a (?: prefix. A noncapturing group simply matches; it does no capture the matched text
- Positive lookahead
  A positive lookahead group has a (?= prefix. It is like a noncapturing group except that after the group matches, the text is rewound to where the group started, effective matching nothing
- Negative lookahead
  A negative lookahead group has a (?! prefix

** Regexp Class
** Regexp Class Escape
** Regexp Quantifier

* Chapter 8: Methods
- Shakespeare@The Tragedy of Hamlet, Prince of Denmark
  "Though this be madness, yet there is method isn't"

** Array
- array.concat(item...)
- array.join(separator)
- array.pop()
- array.push()
- array.splice(start, deleteCount, item...)

** Function
- function.apply(thisArg, argArray)

  Function.method('bind', function(that) {
     var method = this,
     slice = Array.prototype.slice,
     args = slice.apply(arguments, [1]);
     return function() {
        return method.apply(that, args.concat(slice.apply(arguments, [0])));
     };
  });
  
** Number
- number.toExponential(fractionDigits)
- number.toFixed(fractionDigits)
- number.toString(radix)

** Object
- object.hasOwnProperty(name)

** RegExp
- regexp.exec(string)

** String
- string.charAt(pos)
- string.charCodeAt(pos)
- string.concat(string...)
- string.indexOf(searchString, position)
- string.lastIndexOf(searchString, position)
- string.localeCompare(that)
- string.match(regexp)
- string.replace(searchValue, replaceValue)
- string.search(regexp)
- string.slice(start, end)
- string.split(separator, limit)
- string.substring(start, end)
- string.toLocaleLowerCase()
- string.toLocaleUpperCase()
- string.toLowerCase()
- string.toUpperCase()
- String.fromCharCode(char...)

* Chapter 9: Style
- Shakespeare@The First part of Henry the Sixth
  "Here is a silly stately style indeed!"

* Chapter 10: Beautiful Feature
- Shakespeare@Love's Labor's lost
  "Thus, expecting thy reply, I profane my lips on thy
  foot, my eyes on thy picture, and my heart on thy 
  every part. Thine, in the dearest design of industry..."
