2 main things to become a good hacker
a. become good at programming
	- do a lot
	- work on engaging project
b. learn a lot about specific, cool problems

professors are smart but not all of them working on interesting stuffs.
Professors need to publish novel result to advance their careers. What less
ambitious professors is turn out a series of papers whose results are
novel because noone else cares about them.

"Serious" applications like database are often trivial and dull
technically while "frivolous" applications like games are too
sophisticated. There are game companies working on products that has more
intellectual contents than the research at the bottom nine tenths of
university CS departments.

Math is a valuable source of metaphors for almost any kind of work. Eric
Raymonds says the best metaphors for hackers are set theory, combinatorics,
and graph theory

Work on hard problems:
	- math
	- writing and art

Few dissertation are read with pleasure, especially by their authors


Great Hackers
Imagination is hard to measure, but in practice it dominates the kind of
productivity that's measured in lines of code.

Making hackers work in a noisy, distracting environment is like having a
paint factory where the air is full of soot.

Cisco is famous for doing very little product development in house. They
get new technology by buying startups that created it -- where presumably
the hackers did have somewhere quiet to work.

Good hackers are self-managing -> design paradox: If you're not a good
hackers, you can't tell who the good hackers are.

Many people think of taste as something elusive or even frivolous.
One of the worth kinds of projects is writing an interface to a piece of
software that's full of bugs. Another is when you have to customize
something for an individual client's complex and ill-defined needs.

Writing a compiler is interesting because it teaches you what a compiler
is. But writing an interface to a buggy piece of software doesn't teach you
anything because the bugs are random. So it's not just fastidiousness that
makes hackers avoid nasty little problems. It's more a question fo
self-preservation.

Ways to get great hackers to work on tedious problems:
- In startups
- partition the company. They get smart people to world for them by
  establishing a separate R&D department where employees don't have to work
  directly on customers' nasty little problems

It's a mistake to use Microsoft as a model, because their whole culture
derives from that one lucky break. What VCs should be looking for is the
next Apple, or the next Google.

The key to being a good hacker may be to work on what you like. Try to keep
the sense of wonder you had about programming at age 14. If you're worried
that your current job is rotting your brain, it probably is.

The best hackes tend to be smart and curiosity. Maybe great hackes have
some similar inborn ability.
